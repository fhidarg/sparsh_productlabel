<?php
/**
 * Sparsh ProductLabel
 * php version 7.0.31
 *
 * @category Sparsh
 * @package   Sparsh_ProductLabel
 * @author   Sparsh <magento@sparsh-technologies.com>
 * @license  https://www.sparsh-technologies.com  Open Software License (OSL 3.0)
 * @link     https://www.sparsh-technologies.com
 */

namespace Sparsh\ProductLabel\Model\ResourceModel\ProductLabels;

use Magento\Framework\Data\Collection\EntityFactoryInterface;
use Psr\Log\LoggerInterface;
use Magento\Framework\Data\Collection\Db\FetchStrategyInterface;
use Magento\Framework\Event\ManagerInterface;
use Magento\Store\Model\StoreManagerInterface;
use Magento\Framework\DB\Adapter\AdapterInterface;
use Magento\Framework\EntityManager\MetadataPool;
use Magento\Framework\Model\ResourceModel\Db\AbstractDb;
use Sparsh\ProductLabel\Api\Data\ProductLabelsInterface;
use Magento\Store\Model\Store;
/**
 * Class Collection
 *
 * @category Sparsh
 * @package  Sparsh_ProductLabel
 * @author   Sparsh <magento@sparsh-technologies.com>
 * @license  https://www.sparsh-technologies.com  Open Software License (OSL 3.0)
 * @link     https://www.sparsh-technologies.com
 */
class Collection extends \Magento\Framework\Model\ResourceModel\Db\Collection\AbstractCollection
{
    /**
     * @var string
     */
    protected $_idFieldName = 'rule_id';
    /**
     * @var string
     */
    protected $_eventPrefix = 'product_label_rules_entity_collection';
    /**
     * @var string
     */
    protected $_eventObject = 'product_label_rules_collection';
    /**
     * @var StoreManagerInterface
     */
    private $storeManager;
    /**
     * @var MetadataPool
     */
    private $metadataPool;

    /**
     * Collection constructor.
     * @param EntityFactoryInterface $entityFactory
     * @param LoggerInterface $logger
     * @param FetchStrategyInterface $fetchStrategy
     * @param ManagerInterface $eventManager
     * @param StoreManagerInterface $storeManager
     * @param MetadataPool $metadataPool
     * @param AdapterInterface|null $connection
     * @param AbstractDb|null $resource
     */
    public function __construct(
        EntityFactoryInterface $entityFactory,
        LoggerInterface $logger,
        FetchStrategyInterface $fetchStrategy,
        ManagerInterface $eventManager,
        StoreManagerInterface $storeManager,
        MetadataPool $metadataPool,
        AdapterInterface $connection = null,
        AbstractDb $resource = null
    ) {
        $this->storeManager = $storeManager;
        $this->metadataPool = $metadataPool;
        parent::__construct($entityFactory, $logger, $fetchStrategy, $eventManager, $connection, $resource);
    }

    /**
     * Define resource model
     *
     * @return void
     */
    protected function _construct()
    {
        $this->_init(
            \Sparsh\ProductLabel\Model\ProductLabels::class,
            \Sparsh\ProductLabel\Model\ResourceModel\ProductLabels::class
        );
    }

    /**
     * @param $tabId
     * @return array
     */
    public function addStoreFilter($tabId)
    {
        $this->getSelect()->reset(\Magento\Framework\DB\Select::WHERE);
        $this->setMainTable('sparsh_product_label_rules_store');
        $this->addFieldToSelect('store_id')->addFieldToFilter('rule_id', ['eq' => $tabId]);
        foreach ($this as $data) {
            $storeIds[] = $data->getData('store_id');
        }
        return $storeIds;
    }

    /**
     * @param $tabId
     * @return array
     */
    public function addCustomerGroupFilter($tabId)
    {
        $this->getSelect()->reset(\Magento\Framework\DB\Select::WHERE);
        $this->setMainTable('sparsh_product_label_rules_customer_group');
        $this->addFieldToSelect('customer_group_id')->addFieldToFilter('rule_id', ['eq' => $tabId]);
        foreach ($this as $data) {
            $customerGroupIds[] = $data->getData('customer_group_id');
        }
        return $customerGroupIds;
    }

    /**
     * @return \Magento\Framework\Model\ResourceModel\Db\Collection\AbstractCollection
     * @throws \Exception
     */
    public function _afterLoad()
    {
        $entityMetadata = $this->metadataPool->getMetadata(ProductLabelsInterface::class);
        $linkedIds = $this->getColumnValues($entityMetadata->getLinkField());
        $linkField = $entityMetadata->getLinkField();
        if (count($linkedIds)) {
            $this->addData($this->getTable('sparsh_product_label_rules_store'), 'store_id', $linkedIds, $linkField);
            $this->addData($this->getTable('sparsh_product_label_rules_customer_group'), 'customer_group_id', $linkedIds, $linkField);
        }
        return parent::_afterLoad(); // TODO: Change the autogenerated stub
    }

    /**
     * @param $table
     * @param $target
     * @param $linkedIds
     * @param $linkField
     * @throws \Magento\Framework\Exception\NoSuchEntityException
     */
    public function addData($table, $target, $linkedIds, $linkField)
    {
        $connection = $this->getConnection();
        $select = $connection->select()->from(['data' => $table])->where('data.' . $linkField . ' IN (?)', $linkedIds);
        $result = $connection->fetchAll($select);
        if ($result) {
            $storesData = [];
            foreach ($result as $storeData) {
                $storesData[$storeData[$linkField]][] = $storeData[$target];
            }

            foreach ($this as $item) {
                $linkedId = $item->getData($linkField);
                if (!isset($storesData[$linkedId])) {
                    continue;
                }
                if ($target == 'store_id') {
                    $storeIdKey = array_search(Store::DEFAULT_STORE_ID, $storesData[$linkedId], true);
                    if ($storeIdKey !== false) {
                        $stores = $this->storeManager->getStores(false, true);
                        $storeId = current($stores)->getId();
                        $storeCode = key($stores);
                    } else {
                        $storeId = current($storesData[$linkedId]);
                        $storeCode = $this->storeManager->getStore($storeId)->getCode();
                    }
                    $item->setData('_first_store_id', $storeId);
                    $item->setData('store_code', $storeCode);
                    $item->setData($target, $storesData[$linkedId]);
                } else {
                    $item->setData($target, $storesData[$linkedId]);
                }
            }
        }
    }
}
